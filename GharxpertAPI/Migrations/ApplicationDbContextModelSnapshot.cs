// <auto-generated />
using System;
using GharxpertAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GharxpertAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GharxpertAPI.Models.ConstructionType", b =>
                {
                    b.Property<int>("Cno")
                        .HasColumnType("int");

                    b.Property<string>("Ctype")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Cno");

                    b.ToTable("ConstructionTypes");
                });

            modelBuilder.Entity("GharxpertAPI.Models.ContactOurExpert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("ConstructionWork")
                        .HasColumnType("bit");

                    b.Property<bool>("Doors")
                        .HasColumnType("bit");

                    b.Property<bool>("ElectricalWork")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("FalseCeiling")
                        .HasColumnType("bit");

                    b.Property<bool>("Granite")
                        .HasColumnType("bit");

                    b.Property<string>("Landline")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("MS_And_SS_Work")
                        .HasColumnType("bit");

                    b.Property<string>("Mobile")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("Paint")
                        .HasColumnType("bit");

                    b.Property<bool>("PlumbingWork")
                        .HasColumnType("bit");

                    b.Property<bool>("Tiles")
                        .HasColumnType("bit");

                    b.Property<bool>("Windows")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("ContactOurExperts");
                });

            modelBuilder.Entity("GharxpertAPI.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Landline")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("GharxpertAPI.Models.LocalUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LocalUsers");
                });

            modelBuilder.Entity("GharxpertAPI.Models.QuotationDetail", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("QId")
                        .HasColumnType("int");

                    b.Property<int>("QuoteId")
                        .HasColumnType("int");

                    b.Property<bool>("StructuralWorkGroundFloor")
                        .HasColumnType("bit");

                    b.Property<int>("WorkTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("lenth_in_feets")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("no_of_floors")
                        .HasColumnType("int");

                    b.Property<decimal>("slab_area")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("total_area")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("width_in_feets")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("QId");

                    b.HasIndex("WorkTypeId");

                    b.ToTable("QuotationDetails");
                });

            modelBuilder.Entity("GharxpertAPI.Models.QuotationMaster", b =>
                {
                    b.Property<int>("QId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("QDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("QSId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("WorkId")
                        .HasColumnType("int");

                    b.Property<int>("WorkTypeId")
                        .HasColumnType("int");

                    b.HasKey("QId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("QSId");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkId");

                    b.HasIndex("WorkTypeId");

                    b.ToTable("QuotationMasters");
                });

            modelBuilder.Entity("GharxpertAPI.Models.QuotationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("QuatationStatuses");
                });

            modelBuilder.Entity("GharxpertAPI.Models.ServiceCharges", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("ConstructionTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Units")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("WorkId")
                        .HasColumnType("int");

                    b.Property<int>("WorkTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConstructionTypeId");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkId");

                    b.HasIndex("WorkTypeId");

                    b.ToTable("ServiceCharges");
                });

            modelBuilder.Entity("GharxpertAPI.Models.Work", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("WorkDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("WorkIsActive")
                        .HasColumnType("bit");

                    b.Property<string>("WorkName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Works");
                });

            modelBuilder.Entity("GharxpertAPI.Models.WorkType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("WorkDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkID")
                        .HasColumnType("int");

                    b.Property<string>("WorkImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Work_Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("WorkID");

                    b.ToTable("WorkTypes");
                });

            modelBuilder.Entity("GharxpertAPI.Models.QuotationDetail", b =>
                {
                    b.HasOne("GharxpertAPI.Models.QuotationMaster", "QuotationMaster")
                        .WithMany("QuotationDetails")
                        .HasForeignKey("QId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GharxpertAPI.Models.WorkType", "WorkType")
                        .WithMany()
                        .HasForeignKey("WorkTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuotationMaster");

                    b.Navigation("WorkType");
                });

            modelBuilder.Entity("GharxpertAPI.Models.QuotationMaster", b =>
                {
                    b.HasOne("GharxpertAPI.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GharxpertAPI.Models.QuotationStatus", "QuatationStatus")
                        .WithMany()
                        .HasForeignKey("QSId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GharxpertAPI.Models.LocalUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GharxpertAPI.Models.Work", "Work")
                        .WithMany()
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GharxpertAPI.Models.WorkType", "WorkType")
                        .WithMany()
                        .HasForeignKey("WorkTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("QuatationStatus");

                    b.Navigation("User");

                    b.Navigation("Work");

                    b.Navigation("WorkType");
                });

            modelBuilder.Entity("GharxpertAPI.Models.ServiceCharges", b =>
                {
                    b.HasOne("GharxpertAPI.Models.ConstructionType", "ConstructionType")
                        .WithMany()
                        .HasForeignKey("ConstructionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GharxpertAPI.Models.LocalUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GharxpertAPI.Models.Work", "Work")
                        .WithMany()
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GharxpertAPI.Models.WorkType", "WorkType")
                        .WithMany()
                        .HasForeignKey("WorkTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConstructionType");

                    b.Navigation("User");

                    b.Navigation("Work");

                    b.Navigation("WorkType");
                });

            modelBuilder.Entity("GharxpertAPI.Models.Work", b =>
                {
                    b.HasOne("GharxpertAPI.Models.LocalUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GharxpertAPI.Models.WorkType", b =>
                {
                    b.HasOne("GharxpertAPI.Models.Work", "Work")
                        .WithMany()
                        .HasForeignKey("WorkID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Work");
                });

            modelBuilder.Entity("GharxpertAPI.Models.QuotationMaster", b =>
                {
                    b.Navigation("QuotationDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
